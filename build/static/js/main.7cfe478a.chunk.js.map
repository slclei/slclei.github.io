{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"uQAMA,SAASA,EAAOC,GACd,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,O,IA6BPC,E,2KAkBWC,GAAI,IAAD,OAMZ,OAAQ,kBAACN,EAAD,CACNI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAI,EAAKF,MAAME,QAAQG,Q,+BAmBlC,OACI,6BAEI,yBAAKJ,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GA7DnBC,IAAMC,WAoEpBC,E,kDAGF,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAM,CACTC,QAAS,CAAC,CACRN,QAASO,MAAM,GAAGC,KAAK,QAGzBC,WAAW,EACXC,SAAQ,GARO,E,wDAYPZ,GAKV,IAAMQ,EAAQP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAW,GAE1DT,EADQM,EAAQA,EAAQM,OAAO,GACfZ,QAAQW,QAE1BE,EAAgBb,IAAYA,EAAQF,KAIxCE,EAAQF,GAAIC,KAAKM,MAAMK,QAAU,IAAK,IAGtCX,KAAKe,SAAS,CACZR,QAAQA,EAAQS,OAAO,CAAC,CACtBf,QAAQA,KAGVS,WAAYH,EAAQM,OAEpBF,SAAUX,KAAKM,MAAMK,a,6BAGlBM,GACLjB,KAAKe,SAAS,CACZL,WAAYO,EACZN,QAASM,EAAK,IAAK,M,+BAIb,IAsBJC,EAtBG,OAEDX,EAAQP,KAAKM,MAAMC,QAEnBY,EAAUZ,EAAQP,KAAKM,MAAMI,YAI7BU,EAAON,EAAgBK,EAAQlB,SAG/BoB,EAAMd,EAAQe,KAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAKD,EACT,gBAAkBA,EAClB,oBACF,OACE,wBAAIE,IAAKF,GACP,4BAAQ3B,QAAS,kBAAM,EAAK8B,OAAOH,KAAQC,OAc/C,OANAN,EADEE,EACK,WAAWA,EAIX,iBAAkBpB,KAAKM,MAAMK,QAAU,IAAK,KAI/C,yBAAKhB,UAAU,QACX,yBAAKA,UAAU,cAEX,kBAACG,EAAD,CACEG,QAASkB,EAAQlB,QACjBL,QAAS,SAACG,GAAD,OAAK,EAAK4B,YAAY5B,OAGrC,yBAAKJ,UAAU,aACX,6BAAMuB,GACN,4BAAKG,S,GA3FNlB,IAAMC,WAyGzB,SAASU,EAAgBb,GAavB,IAXA,IAAM2B,EAAQ,CACZ,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAGE7B,EAAG,EAAGA,EAAE6B,EAAMf,OAAQd,IAAI,mBAEnB6B,EAAM7B,GAFa,GAE1B8B,EAF0B,KAExBC,EAFwB,KAEtBC,EAFsB,KAIjC,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAK5B,EAAQ6B,IAAM7B,EAAQ4B,KAAK5B,EAAQ8B,GAEhE,OAAO9B,EAAQ4B,GAInB,OAAO,KA7BTG,IAASC,OACL,kBAAC5B,EAAD,MACA6B,SAASC,eAAe,W","file":"static/js/main.7cfe478a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//ES6 type class to build a controlled components\n//square is changed to a function component, with only a render method.\nfunction Square(props){\n  return (\n    <button className='square' onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n/*class Square extends React.Component {\n  //constructor, called in the begining.\n  /*delete, as the state is controlled by boarder\n  constructor(props){\n    //super is required here for parent's props\n    super(props);\n    //set default state, which can only be modified by setState\n    this.state={\n      value: null,\n    };\n  }\n\n  //render function, return a react component\n  render() {\n        return (\n            //setState to be 'X' and display it after being clicked\n            //onClick is changed to this.props.onClick, and this.props.value\n            //so that onClick function by Board is called.\n            <button className=\"square\" onClick={()=> this.props.onClick()}>   \n                {this.props.value}\n            </button>\n        );\n    }\n}*/\n\nclass Board extends React.Component {\n  //deleted as squares is passed from Game\n  /*\n    constructor(props) {\n      super(props);\n      this.state={\n        //add an array of 9 squares, with defaul null\n        squares: Array(9).fill(null),\n        //bydefault, first input is X\n        //after click, xIsNext is flipped in handleClick\n        xIsNext: true,\n      };\n    }*/\n\n    //handle click, a call back from square\n    //this part is moved in Game\n    \n\n    renderSquare(i) {\n        //pass a prop called 'value' to the Square\n        //read from Board's constructor\n        //pass this.handleClick(i) to square, and being called when click on square\n        //on[Event] for props, handle[Event] for methods\n        //update from state and handleClick(i) due to history added in Game\n        return (<Square \n          value={this.props.squares[i]} \n          onClick={()=>this.props.onClick(i)}/>);\n    }\n\n    render() {\n      //call cal function to cal winner\n      //delete as this part is transferred in Game\n      /*\n      const winner = calculateWinner(this.state.squares);\n      let status;\n      //display winner\n      if (winner) {\n        status = 'Winner:' + winner;\n      }\n      //or display next player\n      else{\n        //status is determined by xIsNext as well\n        status = 'Next player: ' + (this.state.xIsNext ?'X': 'O');\n      }*/\n\n        return (\n            <div>\n                \n                <div className='board-row'>\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className='board-row'>\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className='board-row'>\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    //history state is stored here, to store previous Board\n    //in order to pass square and onclick props from Game to Board\n    constructor(props) {\n      super(props);\n      this.state={\n        history: [{\n          squares: Array(9).fill(null),\n        }],\n        //stepNumber for current step\n        stepNumber:0,\n        xIsNext:true,\n      }\n    }\n\n    handleClick(i){\n      //get old version of squares from state\n      //slice() is used here to make a copy of array, instead of modified array directly\n      //get most recent version square\n      //with go back function, slice is added to drop all 'future' steps after chosen step\n      const history=this.state.history.slice(0, this.state.stepNumber+1);\n      const current=history[history.length-1];\n      const squares=current.squares.slice();\n      //early return if winner appears or it is already filled\n      if (calculateWinner(squares) || squares[i]){\n        return;\n      }\n      //update clicked square, value is determined by xIsNext\n      squares[i]= this.state.xIsNext ? 'X': 'O';\n      //update state. After update, square components re-render auto.\n      //new square is appended to history\n      this.setState({\n        history:history.concat([{\n          squares:squares,\n        }]),\n        //update stepNumber\n        stepNumber: history.length,\n      //flip xIsNext on every click\n        xIsNext: !this.state.xIsNext});\n    }\n\n    jumpTo(step){\n      this.setState({\n        stepNumber: step,\n        xIsNext:(step%2)===0,\n      });\n    }\n\n    render() {\n      //get history props\n      const history=this.state.history;\n      //render current step\n      const current = history[this.state.stepNumber];\n      //get most recent history version\n      //const current = history[history.length-1];\n      //calculate winner\n      const winner=calculateWinner(current.squares);\n\n      //map history to moves\n      const moves=history.map((step, move) =>{\n        const desc=move ?\n          'Got to move #' + move:\n          'Got to game start';\n        return (\n          <li key={move}>\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\n          </li>\n        );\n      });\n\n      let status;\n      //displayer winner\n      if (winner) {\n        status='Winner: '+winner;\n      }\n      //or display next player\n      else {\n        status='Next player: '+ (this.state.xIsNext ? 'X': 'O');\n      }\n        return (\n          //pass current.squares and i to Board\n            <div className='game'>\n                <div className='game-board'>\n                  \n                    <Board \n                      squares={current.squares}\n                      onClick={(i)=>this.handleClick(i)}\n                    />\n                </div>\n                <div className='game-info'>\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n//========================================\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n//function to cal whether there is a winner\nfunction calculateWinner(squares) {\n  //winner condition array\n  const lines = [\n    [0,1,2],\n    [3,4,5],\n    [6,7,8],\n    [0,3,6],\n    [1,4,7],\n    [2,5,8],\n    [0,4,8],\n    [2,4,6],\n  ];\n\n  for (let i =0; i<lines.length; i++){\n    //get possible indexes\n    const [a,b,c]=lines[i];\n    //check if there is a winner\n    if (squares[a] && squares[a]===squares[b] && squares[a]===squares[c]){\n      //return winner's symbol\n      return squares[a];\n    }\n  }\n  //or return null if there is no winner\n  return null\n}"],"sourceRoot":""}